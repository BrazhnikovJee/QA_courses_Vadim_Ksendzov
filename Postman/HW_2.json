{
	"info": {
		"_postman_id": "c35b103a-5761-4bfb-b474-3984787190ab",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "string",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () { \r",
							"    pm.expect(jsonData.name).to.eql(\"Vadim\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"22\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request\r",
							"var reqdata = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqdata.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqdata.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqdata.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"check u_salary_1_5_year\", function() {\r",
							"    pm.expect(reqdata.salary*4).to.eql(jsonData.family.u_salary_1_5_year)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"test 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"// 3. Спарсить response body в json.\r",
							"var RespBody = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var Req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(Req.name).to.eql(RespBody.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function(){\r",
							"    pm.expect(Req.age).to.eql(RespBody.age)\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) ??????????\r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(Req.salary).to.eql(Req.salary)\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(RespBody.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"name dog\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"age dog\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name Luky\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age Luky\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Vadim&age=22&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"status 200\", function(){\r",
							"    pm.expect(pm.response).to.status(200)\r",
							"})\r",
							"// 3. Спарсить response body в json.\r",
							"let Resp = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let Req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"test name\", function(){\r",
							"    pm.expect(Resp.name).to.equal(Req.name)\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"test age\", function(){\r",
							"    pm.expect(Resp.age).to.equal(+Req.age)\r",
							"})\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(Req.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(Resp.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(Resp.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(Resp.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(Resp.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('salary = 0'), () => {\r",
							"    pm.expect(Resp.salary[0]).to.eql(Req.salary)\r",
							"}\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('salary = 1'), () => {\r",
							"    pm.expect(Resp.salary[0]).to.eql(Req.salary*2)\r",
							"}\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('salary = 2'), () => {\r",
							"    pm.expect(Resp.salary[0]).to.eql(Req.salary*3)\r",
							"}\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name_obj4\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age_obj4\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary_obj4\");\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name_obj4\", Resp.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age_obj4\", Resp.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary_obj4\", Resp.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var sal = Resp.salary\r",
							"for(var i = 0; i < sal.length; i++){\r",
							"    console.log(sal[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Vadim&age=22&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"test 200\", function() {\r",
							"    pm.expect(pm.response).to.status(200)\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var Resp = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let Req = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check start_qa_salary\", function(){\r",
							"    pm.expect(Resp).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check qa_salary_after_6_months\", function(){\r",
							"    pm.expect(Resp).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check qa_salary_after_12_months\", function(){\r",
							"    pm.expect(Resp).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(Resp).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(Resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"check person\", function(){\r",
							"    pm.expect(Resp).to.have.property(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary\", function(){\r",
							"    pm.expect(Resp.start_qa_salary).to.eql(+Req.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function(){\r",
							"    pm.expect(Resp.qa_salary_after_6_months).to.eql(+Req.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function(){\r",
							"    pm.expect(Resp.qa_salary_after_12_months).to.eql(+Req.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function(){\r",
							"    pm.expect(Resp['qa_salary_after_1.5_year']).to.eql(+Req.salary*3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function(){\r",
							"    pm.expect(Resp['qa_salary_after_3.5_years']).to.eql(Req.salary*3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name\", function(){\r",
							"    pm.expect(Resp.person.u_name[1]).to.eql(+Req.salary)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age\", function() {\r",
							"    pm.expect(Resp.person.u_age).to.eql(+Req.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function(){\r",
							"    pm.expect(Resp.person.u_salary_5_years).to.eql(Req.salary*4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var pers = Resp.person\r",
							"for (var key in pers) \r",
							"    console.log(key)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age_obj4}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name_obj4}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_obj4}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}