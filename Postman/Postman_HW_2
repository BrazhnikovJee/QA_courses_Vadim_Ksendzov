{
	"info": {
		"_postman_id": "c35b103a-5761-4bfb-b474-3984787190ab",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "string",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": "http://162.55.220.72:5005/first"
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () { \r",
							"    pm.expect(jsonData.name).to.eql(\"Vadim\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"22\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"//7. Спарсить request\r",
							"var reqdata = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqdata.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqdata.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqdata.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"check u_salary_1_5_year\", function() {\r",
							"    pm.expect(reqdata.salary*4).to.eql(jsonData.family.u_salary_1_5_year)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": "{{url}}/user_info_3"
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"test 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"// 3. Спарсить response body в json.\r",
							"var RespBody = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var Req = pm.request.url.query.toObject();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(Req.name).to.eql(RespBody.name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function(){\r",
							"    pm.expect(Req.age).to.eql(RespBody.age)\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) ??????????\r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(Req.salary).to.eql(Req.salary)\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(RespBody.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"name dog\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog.name).to.be.true\r",
							"})\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name Luky\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age Luky\", function(){\r",
							"    pm.expect(RespBody.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Vadim&age=22&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}
